{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\leona\\\\Desktop\\\\leoflix\\\\src\\\\components\\\\FormField\\\\index.js\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport styled, { css } from 'styled-components';\nconst FormFieldWrapper = styled.div`\n position: relative;\n  textarea {\n    min-height: 150px;\n  }\n  input[type=\"color\"] {\n    padding-left: 56px;\n  }\n`;\nconst Label = styled.label`\n`;\nLabel.Text = styled.span`\n  color: #E5E5E5;\n  height: 57px;\n  position: absolute; \n  top: 0;\n  left: 16px;\n  \n  display: flex;\n  align-items: center;\n  \n  transform-origin: 0% 0%;\n  font-size: 18px;\n  font-style: normal;\n  font-weight: 300;\n  \n  transition: .1s ease-in-out;\n`;\nconst Input = styled.input`\nbackground: #53585D;\n  color: #F5F5F5;\n  display: block;\n  width: 100%;\n  height: 57px;\n  font-size: 18px;\n\n  outline: 0;\n  border: 0;\n  border-top: 4px solid transparent;\n  border-bottom: 4px solid #53585D;\n\n  padding: 16px 16px;\n  margin-bottom: 45px;\n\n  resize: none;\n  border-radius: 4px;\n  transition: border-color .3s;\n\n  &:focus {\n    border-bottom-color: var(--primary);\n  }\n  &:focus:not([type='color']) + ${Label.Text} {\n    transform: scale(.6) translateY(-10px);\n  }\n  ${({\n  value\n}) => {\n  const hasValue = value.length > 0;\n  return hasValue && css`\n        &:not([type='color']) + ${Label.Text} {\n          transform: scale(.6) translateY(-10px);\n        }\n      `;\n} // eslint-disable-next-line indent\n}\n`;\n\nfunction FormField({\n  label,\n  name,\n  type,\n  value,\n  onChange,\n  suggestions\n}) {\n  const fieldId = `id_${name}`;\n  const isTextArea = type === 'textarea';\n  const tag = isTextArea ? 'textarea' : 'input';\n  const hasSugestions = Boolean(suggestions.length);\n  return /*#__PURE__*/React.createElement(FormFieldWrapper, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Label, {\n    htmlFor: fieldId,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Input, {\n    as: tag,\n    id: fieldId,\n    type: type,\n    name: name,\n    value: value,\n    onChange: onChange,\n    autoComplete: hasSugestions ? 'off' : 'on',\n    list: hasSugestions ? `suggestionFor_${fieldId}` : undefined,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Label.Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 9\n    }\n  }, label), hasSugestions && /*#__PURE__*/React.createElement(\"datalist\", {\n    id: `suggestionFor_${fieldId}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 13\n    }\n  }, suggestions.map(suggestion => /*#__PURE__*/React.createElement(\"option\", {\n    value: suggestion,\n    key: `suggestionFor_${fieldId}_opition${suggestion}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 19\n    }\n  }, suggestion)))));\n}\n\nFormField.defaultProps = {\n  type: 'text',\n  value: '',\n  onChange: () => {},\n  suggestions: []\n};\nFormField.propTypes = {\n  label: PropTypes.string.isRequired,\n  type: PropTypes.string,\n  name: PropTypes.string.isRequired,\n  value: PropTypes.string,\n  onChange: PropTypes.func,\n  suggestions: PropTypes.arrayOf(PropTypes.string)\n};\nexport default FormField;","map":{"version":3,"sources":["C:/Users/leona/Desktop/leoflix/src/components/FormField/index.js"],"names":["React","PropTypes","styled","css","FormFieldWrapper","div","Label","label","Text","span","Input","input","value","hasValue","length","FormField","name","type","onChange","suggestions","fieldId","isTextArea","tag","hasSugestions","Boolean","undefined","map","suggestion","defaultProps","propTypes","string","isRequired","func","arrayOf"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport styled, { css } from 'styled-components';\r\n\r\nconst FormFieldWrapper = styled.div`\r\n position: relative;\r\n  textarea {\r\n    min-height: 150px;\r\n  }\r\n  input[type=\"color\"] {\r\n    padding-left: 56px;\r\n  }\r\n`;\r\n\r\nconst Label = styled.label`\r\n`;\r\nLabel.Text = styled.span`\r\n  color: #E5E5E5;\r\n  height: 57px;\r\n  position: absolute; \r\n  top: 0;\r\n  left: 16px;\r\n  \r\n  display: flex;\r\n  align-items: center;\r\n  \r\n  transform-origin: 0% 0%;\r\n  font-size: 18px;\r\n  font-style: normal;\r\n  font-weight: 300;\r\n  \r\n  transition: .1s ease-in-out;\r\n`;\r\n\r\nconst Input = styled.input`\r\nbackground: #53585D;\r\n  color: #F5F5F5;\r\n  display: block;\r\n  width: 100%;\r\n  height: 57px;\r\n  font-size: 18px;\r\n\r\n  outline: 0;\r\n  border: 0;\r\n  border-top: 4px solid transparent;\r\n  border-bottom: 4px solid #53585D;\r\n\r\n  padding: 16px 16px;\r\n  margin-bottom: 45px;\r\n\r\n  resize: none;\r\n  border-radius: 4px;\r\n  transition: border-color .3s;\r\n\r\n  &:focus {\r\n    border-bottom-color: var(--primary);\r\n  }\r\n  &:focus:not([type='color']) + ${Label.Text} {\r\n    transform: scale(.6) translateY(-10px);\r\n  }\r\n  ${({ value }) => {\r\n    const hasValue = value.length > 0;\r\n    return hasValue && css`\r\n        &:not([type='color']) + ${Label.Text} {\r\n          transform: scale(.6) translateY(-10px);\r\n        }\r\n      `;\r\n  }\r\n  // eslint-disable-next-line indent\r\n  }\r\n`;\r\n\r\nfunction FormField({\r\n  label, name, type, value, onChange, suggestions,\r\n}) {\r\n  const fieldId = `id_${name}`;\r\n  const isTextArea = type === 'textarea';\r\n  const tag = isTextArea ? 'textarea' : 'input';\r\n\r\n  const hasSugestions = Boolean(suggestions.length);\r\n\r\n  return (\r\n    <FormFieldWrapper>\r\n      <Label\r\n        htmlFor={fieldId}\r\n      >\r\n        <Input\r\n          as={tag}\r\n          id={fieldId}\r\n          type={type}\r\n          name={name}\r\n          value={value}\r\n          onChange={onChange}\r\n          autoComplete={hasSugestions ? 'off' : 'on'}\r\n          list={hasSugestions ? `suggestionFor_${fieldId}` : undefined}\r\n        />\r\n        <Label.Text>\r\n          {label}\r\n        </Label.Text>\r\n        {\r\n          hasSugestions && (\r\n            <datalist id={`suggestionFor_${fieldId}`}>\r\n              {\r\n                suggestions.map((suggestion) => (\r\n                  <option value={suggestion} key={`suggestionFor_${fieldId}_opition${suggestion}`}>\r\n                    {suggestion}\r\n                  </option>\r\n                ))\r\n              }\r\n            </datalist>\r\n          )\r\n        }\r\n      </Label>\r\n    </FormFieldWrapper>\r\n  );\r\n}\r\n\r\nFormField.defaultProps = {\r\n  type: 'text',\r\n  value: '',\r\n  onChange: () => { },\r\n  suggestions: [],\r\n};\r\n\r\nFormField.propTypes = {\r\n  label: PropTypes.string.isRequired,\r\n  type: PropTypes.string,\r\n  name: PropTypes.string.isRequired,\r\n  value: PropTypes.string,\r\n  onChange: PropTypes.func,\r\n  suggestions: PropTypes.arrayOf(PropTypes.string),\r\n};\r\n\r\nexport default FormField;\r\n"]},"metadata":{},"sourceType":"module"}